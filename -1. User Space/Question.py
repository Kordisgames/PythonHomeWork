'''
1. Хочу посмотреть на практике, что такое sep= ? +
2. Хачу дізнатися як використовувати правильно функцію def ?
Модуль 4.
def - это определение имени функции, что означает, что в будущем ты сможешь к ней обратиться.
для примера возьмём таку штуку как чситка зубов. Согласись ты выполняешь это каждый день. и это операция, которая содержит несколько действий.
К примеру:
- Выдавить пасту на щётку
- "Поелозить" щёткой по зубам
- Выплюнуть пену
- Прополоскать рот после пены

Это целых 4-ре действия, и в коде, как в жизни, если бы тебе нужно было бы сделать это действие снова и снова, ты бы их писал так по очереди много раз. К примеру:
День 1:
- Выдавить пасту на щётку
- "Поелозить" щёткой по зубам
- Выплюнуть пену
- Прополоскать рот после пены
День 2:
- Выдавить пасту на щётку
- "Поелозить" щёткой по зубам
- Выплюнуть пену
- Прополоскать рот после пены
День 3:
- Выдавить пасту на щётку
- "Поелозить" щёткой по зубам
- Выплюнуть пену
- Прополоскать рот после пены
День 4:
	Не чистил
И т.д. Да, можно использовать цикл, но зачем, если можно сгруппировать свой код и сделать его более приятным и читабельним?
С помощью def ты сделаешь это где-то так:
def Чистка_Зубей():
	- Выдавить пасту на щётку
	- "Поелозить" щёткой по зубам
	- Выплюнуть пену
	- Прополоскать рот после пены

Ты вызовешь её теперь по имени:

День 1:
Чистка_Зубей();
День 2:
Чистка_Зубей();


через def
diff - это уже другая функция, для работы с массивом
Типу через діф задати фукціію яка буде отримувати певні значення і робитиперевірку кожного значення 




'''

'''
А можно ли создать свою def?
то есть вызывать функцию не с помощью def а кастомной штуки типа:
деф function():
	print("La morkovka")
'''