Определение методов и стандартные функции
Некоторые стандартные функции языка Питон являются всего лишь обертками над вызовом метода для передаваемого параметра. Например, функция str вызывает метод __str__ для своего параметра. Если мы опишем такой метод для нашего класса, то можно будет применять к нему функцию str явно и неявно (например, она автоматически вызовется при вызове print для объекта нашего класса). 

Мы бы хотели, чтобы __str__ возвращал текстовое представление нашего комплексного числа. Например, число с действительной частью 1 и мнимой 2 должно быть представлено в виде строки ''1+2i'', а число с действительной частью 3 и мнимой -4.5 - как ''3-4.5i''. Полное описание класса с добавленным методом будет выглядеть так:

class Complex:
    def __init__(self, re=0, im=0):
        self.re = re
        self.im = im
    def __str__(self):
        strRep = str(self.re)
        if self.im >= 0:
            strRep += '+'
        strRep += str(self.im) + 'i'
        return strRep
        
a = Complex(1, 2)
print(a)
b = Complex(3, -4.5)
print(b)

Переопределение операторов
В языке Питон можно переопределить и поведение операторов. Например, если у нас есть два числа x и y, то запись x + y реально преобразуется в вызов метода x.__add__(y). Значок операции + является всего лишь удобным для человека переопределением вызова метода add. 

Для комплексных чисел логично определена операция сложения: это сложение отдельно действительных и отдельно мнимых частей. В результате вызова метода для сложения двух чисел должен конструироваться новый объект класса Complex, а переданные в качестве параметров объекты не должны изменяться. Действительно, когда мы выполняем операция z = x + y для обычных чисел, то ожидаем, что сконструируется новый объект, к которому привяжется ссылка z, а x и y останутся без изменения.

Будем придерживаться этой же логики при реализации метода для сложения двух комплексных чисел. Наш метод __add__ должен принимать два параметра, каждый из которых является комплексным числом.


class Complex:
    def __init__(self, re=0, im=0):
        self.re = re
        self.im = im
    def __str__(self):
        strRep = str(self.re)
        if self.im >= 0:
            strRep += '+'
        strRep += str(self.im) + 'i'
        return strRep

Переопределять метод add имеет смысл только в тех ситуациях, когда программисту, использующему ваш класс, будет очевиден смысл операции +. Например, если бы вы создали класс для описание некоторых характеристик человека, то операция + для двух объектов-людей воспринималась разными пользователями вашего класса совершенно по-разному, в зависимости от развитости фантазии читателя. Такого неоднозначного понимания лучше избегать и вовсе не переопределять операцию +, если результат её работы не очевиден.