------==================Задача 1 (7/10)====================------
Реализуйте класс Matrix. Он должен содержать:

Конструктор от списка списков. 
Гарантируется, что списки состоят из чисел, не пусты и все имеют одинаковый размер.Конструктор должен копировать содержимое списка списков, т. е. при изменении списков,от которых была сконструирована матрица, содержимое матрицы изменяться не должно.

Метод __str__, переводящий матрицу в строку. При этом элементы внутри одной строкидолжны быть разделены знаками табуляции, а строки  —  переносами строк. После каждойстроки не должно быть символа табуляции и в конце не должно быть переноса строки.

Метод size без аргументов, возвращающий кортеж вида (число строк, число столбцов).Пример теста с участием этого метода есть в следующей задаче этой недели.

Формат ввода
Вводится исходный код тестирующей программы на языке Python.

Формат вывода
Выведите результат её работы.

<<< Входные данные
m = Matrix([[2, 0, 0], [0, 1, 6], [9, 4, 2]])
>>> Вывод
2	0	0
0	1	6
9 4 2

<<< Входные данные
m = Matrix([[2, 0, 0], [0, 1, 6]])
>>> Вывод
2	0	0
0	1	6

------==================Задача 2 (6/10)====================------
Добавьте в предыдущий класс следующие методы:

 __add__, принимающий вторую матрицу того же размера и возвращающий сумму матриц.
 __mul__, принимающий число типа int или float и возвращающий матрицу, умноженную на скаляр.
 __rmul__, делающий то же самое, что и __mul__. Этот метод будет вызван в том случае, аргумент находится справа. Для реализации этого метода в коде класса достаточно написать __rmul__ = __mul__.
Иллюстрация:

 В следующем случае вызовется __mul__: Matrix([[0, 1], [1, 0]) * 10.
 В следующем случае вызовется __rmul__ (так как у int не определен __mul__ для матрицы справа): 10 * Matrix([[0, 1], [1, 0]).
Разумеется, данные методы не должны менять содержимое матрицы.

Формат ввода

Как в предыдущей задаче.

Формат вывода

Как в предыдущей задаче.
------==================Задача 3 (7/10)====================------
Добавьте в программу из предыдущей задачи класс MatrixError, содержащий внутри self поля matrix1 и matrix2 — ссылки на матрицы.

В класс Matrix внесите следующие изменения:

 Добавьте в метод __add__ проверку на ошибки в размере входных данных, чтобы при попытке сложить матрицы разных размеров было выброшено исключение MatrixError таким образом, чтобы matrix1 поле MatrixError стало первым аргументом __add__ (просто self), а matrix2  —  вторым (второй операнд для сложения).
 Реализуйте метод transpose, транспонирующий матрицу и возвращающую результат (данный метод модифицирует экземпляр класса Matrix)
 Реализуйте статический метод transposed, принимающий Matrix и возвращающий транспонированную матрицу. Пример статического метода.
Формат ввода

Как в предыдущей задаче.

Формат вывода

Как в предыдущей задаче.
------==================Задача 4 (5/10)====================------
Внесите следующие изменение в предыдущую программу:

Измените метод __mul__ таким образом, чтобы матрицы можно было умножать как на скаляры, так и на другие матрицы. В случае, если две матрицы перемножить невозможно, то тогда выбросьте ошибку MatrixError. Первая матрице в ошибке  —  это self, вторая  —  это второй операнд умножения.

Формат ввода
Как в предыдущей задаче.

Формат вывода
Как в предыдущей задаче.
------==================Задача 5 (7/10)====================------
Пусть экземпляр класса Matrix задаёт систему линейных алгебраических уравнений.

Тогда добавьте в класс метод solve, принимающий вектор-строку свободных членов и возвращающий строку-список, состоящую из float  —  решение системы, если оно единственно. Если решений нет или оно не единственно  — выдайте какую-нибудь ошибку.

Формат ввода
Как в предыдущей задаче.

Формат вывода
Как в предыдущей задаче.

<<< Входные данные
m = Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
print(m.solve([1,1,1]))
>>> Вывод программы
[1.0, 1.0, 1.0]
------==================Задача 6 (5/10)====================------
К программе в предыдущей задаче добавьте класс SquareMatrix  —  наследник Matrix с операцией возведения в степень __pow__, принимающей натуральную степень (включая ноль), в которую нужно возвести матрицу. Используйте быстрое возведение в степень.

Формат ввода
Как в предыдущей задаче.

Формат вывода
Как в предыдущей задаче.

<<< Входные данные
m = SquareMatrix([[1, 0], [0, 1]])
print(isinstance(m, Matrix))
>>> Вывод программы
True