Для каких задач используется? Если нужна сортировка и необходимо запомнить на какой позиции стоял элемест в исходных данных

Сортировка подсчетом
В ряде задач возможные значения в сортируемом списке сильно ограничены. Например, если мы хотим отсортировать оценки от 0 до 10, то может оказаться эффективнее подсчитать, сколько раз встречалась каждая из оценок и затем вывести её столько раз. 

Реализация такого подхода очень проста:

marks = map(int, input().split())
cntMarks = [0] * 11
for mark in marks:
    cntMarks[mark] += 1
for nowMark in range(11):
    print((str(nowMark) + ' ') * cntMarks[nowMark], end='')

В этой программе мы создали список, состоящий из 11 нулей в одну строку. Этот приём часто пригождается и в других задачах.

Связь задач поиска и сортировки
Во многих задачах линейного поиска (например, поиск минимального элемента) возникает соблазн воспользоваться сортировкой. 

С этим соблазном следует бороться, т.к. сложность сортировки в языке Питон составляет O(NlogN), т.е. для сортировки списка из N элементов нужно совершить порядка NlogN действий.

При этом алгоритмы линейного поиска работают за O(N), что асимптотически быстрее, чем сортировка. Поэтому в задачах линейного поиска (даже для поиска третьего по величине элемента) следует реализовывать линейный поиск, а не пользоваться сортировкой.

По иронии судьбы, сортировка в интерпретаторе CPython может оказаться быстрее рукописного линейного поиска (из-за того, что она реализовано максимально эффективно и на языке Си). Но это досадное недоразумение не должно побороть в вас желание писать линейный поиск руками.