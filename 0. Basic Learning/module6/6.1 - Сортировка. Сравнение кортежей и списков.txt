Сортировка списков
В программировании очень часто удобнее работать с отсортированными данными. В языке Питон существует возможность отсортировать списки двумя способами. Рассмотрим их на примере решения простой задачи о сортировке последовательности чисел по неубыванию (это как по возрастанию, но, возможно, с одинаковыми числами). Вот первый способ упорядочить его:


myList = list(map(int, input().split()))
myList.sort()
print(' '.join(map(str, myList)))

В этом примере используется метод sort, применяемый к списку. Этот метод изменяет содержимое списка - после применения метода sort элементы в списке становятся упорядоченными. Такой метод определен только для объектов типа список, его нельзя применить к кортежу или iterable или строке.

Второй способ состоит в применении функции sorted, которая возвращает отсортированный список, но не изменяет значение своего параметра:


myList = list(map(int, input().split()))
sortedList = sorted(myList)
print(' '.join(map(str, sortedList)))

Использование функции sorted оправдано в случае, если исходные данные нужно сохранить в неизменном виде с какой-то целью. Например, sorted можно использовать внутри своей функции для создания отсортированной копии, чтобы не портить переданный нам список.

Чтобы отсортировать список по невозрастанию (убыванию), необходимо передать в метод или фукнцию именованный параметр reverse. Например, это будет выглядеть как myList.sort(reverse=True) или sorted(myList, reverse=True). 

Функция sorted может принимать в качестве параметра не только список, но и что угодно итерируемое: кортежи, iterable или строки:

print(sorted((1, 3, 2)))
print(sorted(range(10, -1, -2)))
print(sorted("cba"))

При этом sorted всегда возвращает список, т.е. вывод этой программы будет такой:

[1, 2, 3]

[0, 2, 4, 6, 8, 10] 

['a', 'b', 'c'] 

Сортировку можно применять к спискам, все элементы которых сравнимы между собой. Обычно это однородные списки (состоящие из элементов одного типа) или, в редких случаях, целые и вещественные числа вперемешку.

Сравнение кортежей и списков
Два кортежа или списка можно также сравнивать между собой. Например, выражение (1, 2, 3) < (2, 3, 4) будете истинным, а [1, 2, 3] < [1, 2] ложным. Сравнение кортежей и списков происходит поэлементно, как и сравнение строк. Как только на каких-то позициях кортежа или списка встретились различные элементы, то взаимный порядок кортежей такой же, как у этих элементов. Если же различий найдено не было, то меньше тот кортеж, который короче. Всё в точности как при сравнении строк.

Естественно, сравниваемые кортежи или списки должны содержать на соответствующих позициях сравнимые элементы. Попытка сравнить кортеж (1, 2) с кортежем ("Some text", 42) приведет к ошибке (а сравнение (1, 2) с (42, "Some text") к ошибке не приведет). Обычно, всё же, сравниваются кортежи, состоящие из элементов одинакового типа.

Это свойство кортежей можно использовать для решения сложных задач на сортировку. 

