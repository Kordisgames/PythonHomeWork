Процесс создания кортежа называется упаковкой кортежа. Если в одном выражении присваивания происходит и упаковка и распаковка кортежа, то сначала выполняется упаковка, а затем распаковка кортежа. Так, в результате работы программы:

a, b, c = 1, 2, 3
a, b, c = c, b, a
print(a, b, c)

будет выведено 3 2 1. Обратите внимание, что функции print передается в качестве параметра не кортеж, а три целых числа.

Главное что нужно понять, что записать вида (a, b, c) = (c, b, a) не эквивалентна цепочке присваиваний вида a = c; b = b; c = a. Такая цепочка присваиваний привела бы к тому, что в переменных a, b, c оказались бы значения 3, 2, 3.

Функция range
В языке Питон есть функция range, которая позволяет генерировать объекты типа iterable (к элементам которых можно получать последовательный доступ), состоящие из целых чисел.

Для вывода объектов типа iterable мы будем пользоваться функцией tuple, которая позволяет сделать кортеж, состоящий из всех элементов iterable, записанных последовательно.

Например, если запустить программу

print(tuple(range(10)))

то будет напечатано (0, 1, 2, 3, 4, 5, 6, 7, 8, 9). Функция range с одним параметром n генерирует iterable, содержащий последовательные числа от 0 до n-1.

Существует вариант range с двумя параметрами, range(from, to) сгенерирует iterable со всеми числами от from до to-1 включительно.

Также существует range с тремя параметрами range(from, to, step), который сгенерирует iterable с числами от from, не превышающие to с шагом изменения step. Если шаг отрицателен, то from должен быть больше to. Например, range(10, 0, -2) сгенерирует последовательность чисел 10, 8, 6, 4, 2. 0 не будет входить в эту последовательность.

Во многом параметры range напоминают значения параметров в срезах строк.

Цикл for
Цикл for позволяет поочередно перебрать элементы из чего-нибудь итерируемого (iterable или tuple). Например, мы можем перебрать названия цветов яблок таким способом:

for color in ('red', 'green', 'yellow'):
    print(color, 'apple')

В результате выполнения этой программы будет напечатано:

red apple
green apple
yellow apple

На место переменной color будут поочередно подставляться значения из кортежа. В общем случае цикл for выглядит так for имяПеременной in нечтоИтерируемое:

Все действия, которые должны выполняться в for, должны выделяться отступом, как и в if или while. Работа цикла for может быть прервана с помощью команды break или может быть осуществлен переход к следующей итерации с помощью continue. Эти команды имеют тот же эффект, что и при работе с циклом while.

Часто for используется вместе с функцией range. Например, с помощью for можно напечатать нечетные числа от 1 до 100:

for i in range(1, 100, 2):
    print(i)

Внутри for может быть расположен и другой for. Вот так выглядит код для вывода таблицы умножения всех чисел от 1 до 10 (не очень красивой):


for i in range(1, 11):
    for j in range(1, 11):
        print(i * j, end=' ')
    print()

Как вы можете заметить, при использовании функции range в for мы не преобразовывали iterable в tuple. Это связано с тем, что for как раз хочет получать последовательный доступ, который умеет давать iterable. Tuple умеет намного больше, но здесь его использование приведет к ненужным затратам времени и памяти.

