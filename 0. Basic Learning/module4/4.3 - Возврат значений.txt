Как было сказано выше, выполнение функции прерывается по команде return. Для примера рассмотрим функцию поиска максимума из двух чисел, которые передаются ей в качестве параметров:

def max2(a, b):
  if a > b:
    return a
  else:
    return b

Её можно было бы записать и по-другому:

def max2(a, b):
  if a > b:
    return a
  return b

Если условие в if'е было истинным, то выполнится команда return a и выполнение функции будет прекращено - до команды return b выполнение просто не дойдет.

С помощью функции max2 можно реализовать функцию max3, возвращающую максимум из трех чисел:

def max3(a, b, c):
  return max2(max2(a, b), c)   

Эта функция дважды вызывает max2: сначала для выбора максимума среди чисел a и b, а затем для выбора максимума между найденным значением и оставшимся числом c.

Здесь нужно обратить внимание, что в качестве аргумента функции может передаваться не только переменная или константное значение, но и результат вычисления любого арифметического выражения. Например, результат, возвращенной другой функцией.

Наши функции max2 и max3 будут работать не только для чисел, но и для любых сравнимых объектов, например, для строк.

Возврат нескольких значений функцией
Рассмотрим случай, когда функция должна вернуть несколько значений на примере функции, упорядочивающей два числа. Чтобы вернуть несколько значений, достаточно записать их в return через запятую. Аналогично, через запятую должны быть перечислены переменные, в которые будут попадать вычисленные значения.

def sort2(a, b):
  if a < b:
    return a, b
  else:
    return b, a
a = int(input())
b = int(input())
minimum, maximum = sort2(a, b)
print(minimum, maximum)

На самом деле, при перечислении значений через запятую, формируются объекты типа "кортеж", их подробное изучение будет на следующей лекции. Имеющихся знаний достаточно для использования функций, возвращающих несколько значений.

Возврат логических значений
Иногда удобно оформлять даже простые вещи в виде функций, чтобы повысить читаемость программы. Например, если нужно проверить число на четность, то гораздо понятнее будет каждый раз вызывать функцию isEven(n), а не писать каждый раз n % 2 == 0.

Такая функция может выглядеть так:

def isEven(n):
  return n % 2 == 0

Результатом работы этой функции будет истина или ложь. Теперь функцию очень удобно применять в if'ах:

if isEven(n):
  print("EVEN")
else:
  print("ODD")
Если есть сложное логическое выражение, то лучше оформить его в виде функции с говорящим названием - так программу будет легче читать, а вероятность ошибок в ней резко снизится.