Щоб зрозуміти, що робить yield, необхідно знати, що таке генератори, а перед генераторами йдуть ітератори.

Ітератори
Коли ви створюєте список, ви можете прочитати його елементи один за одним. Це називається ітерація:

>>> mylist = [1, 2, 3]
>>> for i in mylist:
...    print(i)
1
2
3
В даному випадку, mylist є ітерованим об’єктом. При створенні списку за допомогою спискових виразів, він також буде ітерованим.

>>> mylist = [x*x for x in range(3)]
>>> for i in mylist:
...    print(i)
0
1
4
Все, до чого можна застосувати for … in … : є ітерованими об’єктами: lists, strings, files…

Ітерації зручно використовувати, тому що, ви можете прочитати дані багато разів, але вони зберігаються в пам’яті й інколи це призводить до зайвих затрат ресурсів.

Генератори
Генератори це ті ж самі ітератори, але дані ви можете проітерувати лише один раз. Це тому, що вони не зберігаються в пам’яті, а генеруються на льоту:

>>> mygenerator = (x*x for x in range(3))
>>> for i in mygenerator:
...    print(i)
0
1
4
>>> for i in mygenerator:
...    print(i)

>>> 
Генератори використовують такий же синтаксис, як і спискові вирази, окрім дужок: ( ) замість [ ]. Ви не можете виконати for i in mygenerator вдруге, оскільки генератор може бути використаний лише раз: він вираховує 0, тоді видаляє його з пам’яті і обчислює 1, видаляє його, обчислює 4 і також його видаляє, один за одним.  

