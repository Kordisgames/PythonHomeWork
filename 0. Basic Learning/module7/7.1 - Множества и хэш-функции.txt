Множества и хеш-функции
В языке Питон множества имеют тот же смысл, что и в математике: набор объектов без определенного порядка. В множество можно добавлять и удалять объекты, проверять принадлежность объекта множества и перебирать все объекты множества. 

Также над множествами можно совершать групповые операции, например, пересекать и объединять два множества.

Проверка принадлежности элемента множеству, а также операции удаления и добавления элементов, осуществляются за O(1) (если бы мы хранили элементы в списке и хотели бы проверить принадлежность элемента списку, то нам потребовалось бы O(N) операций, где N - длина списка).

Такая скорость достигается использованием хеш-таблиц. Хеш-таблица - это массив достаточно большого размера (назовем этот размер K). Каждому неизменяемому объекту можно сопоставить по некоторому правилу число M от 0 до K и поместить этот объект в ячейку списка с индексом M. Например, для целых чисел таким правилом сопоставления может быть просто подсчет остатка от деления целого числа на K. Операцию взятия остатка будет нашей хеш-функцией.

Теперь если нам нужно проверить, принадлежит ли некоторое число множеству, мы просто считаем хеш-функцию от него и проверяем, лежит ли в ячейке с индексом, равным результату вычисления хеш-функции наш объект или нет. Для других типов данных можно применить такой подход: любой объект так или иначе является последовательностью байт. Будем интерпретировать эту последовательность байт как число и подсчитаем хеш-функцию для этого числа. 

Естественно, может оказаться, что несколько объектов дают один и тот же хеш (отображение между огромным множеством различных объектов и скромным размером множества допустимых хешей не может быть биективным). Такие проблемы можно разрешить, не ухудшая асимптотическую сложность. Подробнее такие методы вы будете изучать на курсе алгоритмов.

Поскольку, например, числа, могут быть достаточно длинными, то операция подсчета хеш-функции при каждой операции с этим объектов в множестве может быть очень медленной. Поэтому каждый неизменяемый объект в Питоне имеет заранее насчитанный хеш, который подсчитывается один раз при его создании. Кстати, с помощью этих же хешей можно понимать, есть ли уже объект в памяти и не создавать новых объектов, а просто подвешивать еще одну ссылку на уже существующий объект.

Изменяемые типы, такие как список, не имеют заранее насчитанных хешей. Изменение всего одного элемента в списке привело бы к полному пересчету хеша для всего списка, что катастрофически замедлило бы работу со списками. Поэтому у изменяемых объектов нет хеша и они не могут быть добавлены в множество.

Само множество также является изменяемым объектом и не может быть, например, элементом другого множества.

Существуют также неизменяемые множества, которые создаются с помощью функции frozenset.